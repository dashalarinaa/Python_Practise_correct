# Планеты вращаются вокруг звезд по эллиптическим орбитам. Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая планета ровно одна

# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]

# def find_farthest_orbit(orbits):
#     max = 0
#     max_w = 0 # переменная где сохраним кортеж с максимальным произведением элементов
#     for i in orbits:
#         if i[0] != i[1] and i[0] * i[1] > max:
#             max = i[0] * i[1]
#             max_w = i
#     return max_w


# print(*find_farthest_orbit(orbits))


# def find_farthest_orbit(f):
#   a = list(filter(lambda x:True if x[0] != x[1] else False, f))
#   b = list(map(lambda x: x[0] * x[1], a))
#    max_val = max(b)
#   indx_max = b.index(max_val)
#   return f[indx_max]

# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(find_farthest_orbit(orbits))


def find_farthest_orbit(f):
    return max(f, key=lambda x: x[0] * x[1] if x[0] != x[1] else -1)


orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(*find_farthest_orbit(orbits))